user  charles;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_x_forwarded_for" '
                      '"$http_referer"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;
    #gzip  on;

    server {
        listen       3001 ssl;

        # serve files in webroot over https.
        location / {
            root /synk/webroot;
            try_files $uri @fallback;
        }

        location @fallback {
            root /synk/public;
            try_files $uri $uri/ /index.html;
        }

        # This seems to create CORS issues. I believe the HOST header is not
        # passed by default. I can't tell how nginx handles cors with proxies.
        # Probably the way to deal with this it to read fully what nginx
        # does with http headers and proxies.
        #
        # As a hacky solution, the go websocket server is currently serving
        # requests with any Origin.
        location /ws {
            proxy_pass http://127.0.0.1:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        # ssl certificates
        ssl_certificate     /synk/certificates/fullchain.pem;
        ssl_certificate_key /synk/certificates/privkey.pem;
    }

    server {
        listen 3000;

        # serve files in webroot over http.
        location / {
            root /synk/webroot;
            try_files $uri @https-redirect;
        }

        location @https-redirect {
            return 301 https://${HTTPS_REDIRECT}$request_uri;
        }
    }
}
